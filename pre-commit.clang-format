#!/usr/bin/env python3

"""
    This pre-commit hook checks each staged file if it complies to the
    formatting rules, as defined by clang-format (or the programm specified
    in `git config hooks.clangformat`).
"""

import os
import subprocess
import sys
import tempfile


class FormatRunException(RuntimeError):
    pass


class NonEmptyDiffException(Exception):
    pass


def check_dir(basedir, staged_only=True):
    os.chdir(basedir)
    # alternative clang-format binary given?
    try:
        clangformat = subprocess.check_output(['git', 'config', 'hooks.clangformat'],
                                              universal_newlines=True)
    except subprocess.CalledProcessError as _:
        clangformat = 'clang-format'
    args = ['git', 'diff', '--name-only', '--cached']
    if staged_only:
        args.append('--cached')
    out = subprocess.check_output(args,
                                  universal_newlines=True)
    fails = []
    for changed_file in sorted(out.splitlines()):
        try:
            check_file(changed_file, basedir, clangformat.strip())
        except NonEmptyDiffException as _:
            fails.append(changed_file)
    return fails


def check_file(touched_file, basedir, format_binary, extension_whitelist=('c', 'cc', 'cxx', 'h', 'hh', 'hxx')):
    if not touched_file.split('.')[-1] in extension_whitelist:
        return
    filename = os.path.join(basedir, touched_file).strip()
    try:
        out = subprocess.check_output([format_binary, '-style=file', filename],
                                    universal_newlines=True)
    except subprocess.CalledProcessError as e:
        raise FormatRunException('Error executing {} on file\n{}'.format(format_binary, filename, e.output))
    tmp_filename = tempfile.NamedTemporaryFile(mode='wb', delete=False).name
    with open(tmp_filename, 'w') as tmp_file:
        tmp_file.write(out)
    try:
        subprocess.check_call(['diff', filename, tmp_filename],
                                      universal_newlines=True)
    except subprocess.CalledProcessError as res:
        if res.returncode == 1:
            raise NonEmptyDiffException('clang-format has to be applied to \'{}\'!'.format(filename))
        raise RuntimeError('error diffing {} vs {}'.format(touched_file, tmp_filename))
    finally:
        os.remove(tmp_filename)

if __name__ == '__main__':
    try:
        dirname = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
        fails = check_dir(dirname)
    except Exception as e:
        print(e)
        sys.exit(1)
    else:
        sys.exit(len(fails))
